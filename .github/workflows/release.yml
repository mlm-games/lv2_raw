name: Release crate (crates.io only)

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: write 

concurrency:
  group: release-crate-${{ github.ref }}
  cancel-in-progress: false

env:
  CARGO_TERM_COLOR: always

jobs:
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.meta.outputs.name }}
      version: ${{ steps.meta.outputs.version }}
      crate_path: ${{ steps.pkg.outputs.crate_path }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - name: Read package metadata and validate tag
        id: meta
        run: |
          TAG="${GITHUB_REF_NAME#v}"
          NAME=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].name')
          VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[0].version')
          echo "Tag: $TAG  Cargo: $VERSION ($NAME)"
          if [ "$TAG" != "$VERSION" ]; then
            echo "Version mismatch: tag v$TAG != Cargo.toml $VERSION"
            exit 1
          fi
          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Cargo package (dry-run archive)
        id: pkg
        run: |
          set -euxo pipefail
          cargo package --locked
          NAME="${{ steps.meta.outputs.name }}"
          VER="${{ steps.meta.outputs.version }}"
          CRATE="target/package/${NAME}-${VER}.crate"
          test -f "$CRATE"
          echo "crate_path=$CRATE" >> "$GITHUB_OUTPUT"

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          for i in 1 2 3; do
            if cargo publish --locked; then exit 0; fi
            echo "Publish failed, retrying in $((i*10))s..."; sleep $((i*10))
          done
          exit 1

  release:
    name: Create GitHub Release
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Prepare assets
        run: |
          mkdir -p dist
          cp "${{ needs.publish.outputs.crate_path }}" dist/
          (cd dist && shasum -a 256 *.crate > SHA256SUMS.txt)

      - name: Create/Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.publish.outputs.version }}
          name: v${{ needs.publish.outputs.version }}
          generate_release_notes: true
          files: |
            dist/*.crate
            dist/SHA256SUMS.txt